//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// $Id: GaletDetectorConstruction.cc 87359 2014-12-01 16:04:27Z gcosmo $
// 
/// \file GaletDetectorConstruction.cc
/// \brief Implementation of the GaletDetectorConstruction class

#include "GaletDetectorConstruction.hh"
#include "GaletSD.hh"
#include "G4SDManager.hh"
#include "G4Material.hh"
#include "G4NistManager.hh"
#include "G4MMaterialFileConstruction.hh"

#include "GaletDetectorConstructionMessenger.hh"

#include "G4Box.hh"
#include "G4Tubs.hh"
#include "G4LogicalVolume.hh"
#include "G4PVPlacement.hh"
#include "G4PVReplica.hh"
#include "G4GlobalMagFieldMessenger.hh"
#include "G4AutoDelete.hh"

#include "G4SDManager.hh"

#include "G4VisAttributes.hh"
#include "G4Colour.hh"

#include "G4PhysicalConstants.hh"
#include "G4SystemOfUnits.hh"


//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

GaletDetectorConstruction::GaletDetectorConstruction()
 : G4VUserDetectorConstruction(),
   fCheckOverlaps(true)
{
  materialConstructor = new G4MMaterialFileConstruction;
  messenger = new GaletDetectorConstructionMessenger(this);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

GaletDetectorConstruction::~GaletDetectorConstruction()
{ 
  delete materialConstructor;
  delete messenger;
}  

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

G4VPhysicalVolume* GaletDetectorConstruction::Construct()
{
  // Define materials 
  DefineMaterials();
  
  // Define volumes
  return DefineVolumes();
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void GaletDetectorConstruction::DefineMaterials()
{ 
  // Print materials
  G4cout << *(G4Material::GetMaterialTable()) << G4endl;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

G4VPhysicalVolume* GaletDetectorConstruction::DefineVolumes()
{
  // Geometry parameters
  G4double worldSizeX = 100.*cm;
  G4double worldSizeY = 100.*cm;
  G4double worldSizeZ  = 300.*cm; 
  //     
  // World Volume
  //
  G4VSolid* worldS 
    = new G4Box("World",           // its name
                 worldSizeX/2, worldSizeY/2, worldSizeZ/2); // its size
                         
  G4LogicalVolume* worldLV
    = new G4LogicalVolume(
                 worldS,           // its solid
                 G4Material::GetMaterial("G4_AIR"),  // its material
                 "World");         // its name
                                   
  G4VPhysicalVolume* worldPV
    = new G4PVPlacement(
                 0,                // no rotation
                 G4ThreeVector(),  // at (0,0,0)
                 worldLV,          // its logical volume
                 "World",          // its name
                 0,                // its mother  volume
                 false,            // no boolean operation
                 0,                // copy number
                 fCheckOverlaps);  // checking overlaps
  // Visualization attributes
  //worldLV->SetVisAttributes (G4VisAttributes::Invisible);

  //                               
  // Window  Al
  //

  G4double WinR  = 120.*mm;
  G4double WinZ  = 1.*mm;
  G4VSolid* WinS
    = new G4Tubs("AlWinS",     // its name
                 0.*mm, WinR, WinZ/2, 0., twopi ); // its size
                         
  G4LogicalVolume* WinLV
    = new G4LogicalVolume(
                 WinS,     // its solid˜
                 G4Material::GetMaterial("G4_Al"),  // its material
                 "WinLV");   // its name

  G4RotationMatrix* Winrot=new G4RotationMatrix();
  Winrot->rotateX(0.*degree);
  G4ThreeVector Wintran;
  Wintran.set(0,0,0.5*mm);
  new G4PVPlacement(
                 Winrot,                // no rotation
                 Wintran,  // at (0,0,0)
		 WinLV,
                 "WinPV",    // its name
                 worldLV,          // its mother  volume
                 false,            // no boolean operation
                 0,                // copy number
                 fCheckOverlaps);  // checking overlaps
  //
  G4VisAttributes* WinVisAtt= 
    new G4VisAttributes(G4Colour(1.0,1.0,1.0,0.5));
  WinVisAtt->SetVisibility(true);
  WinLV->SetVisAttributes(WinVisAtt);

  
  //                               
  // HPGe crystal
  //

  G4double GeR  = 100.*mm;
  G4double GeZ  = 120.*mm;
  G4VSolid* GeS
    = new G4Tubs("GeS",     // its name
                 0.*mm, GeR, GeZ/2, 0., twopi ); // its size
                         
  G4LogicalVolume* GeLV
    = new G4LogicalVolume(
                 GeS,     // its solid˜
                 G4Material::GetMaterial("G4_Ge"),  // its material
                 "GeLV");   // its name

  G4RotationMatrix* Gerot=new G4RotationMatrix();
  Gerot->rotateX(0.*degree);
  G4ThreeVector Getran;
  Getran.set(0,0,-60.5*mm);
  new G4PVPlacement(
                 Gerot,                // no rotation
                 Getran,  // at (0,0,0)
                 GeLV,     // its logical volume                         
                 "GePV",    // its name
                 worldLV,          // its mother  volume
                 false,            // no boolean operation
                 0,                // copy number
                 fCheckOverlaps);  // checking overlaps 

  G4VisAttributes* GeVisAtt= 
    new G4VisAttributes(G4Colour(0.0,1.0,1.0,1.0));
  GeVisAtt->SetVisibility(true);
  GeLV->SetVisAttributes(GeVisAtt);


  //                               
  // RI Case ( Exercise )
  //
  G4double RIR  = 10.*mm;
  G4double RIZ  = 8*mm;
  G4VSolid* RIS
    = new G4Tubs("RIS",     // its name
                 0.*mm, RIR, RIZ/2, 0., twopi ); // its size
                         
  G4LogicalVolume* RILV
    = new G4LogicalVolume(
                 RIS,     // its solid˜
                 G4Material::GetMaterial("G4_POLYETHYLENE"),  // its material
                 "RILV");   // its name

  G4RotationMatrix* RIrot=new G4RotationMatrix();
  RIrot->rotateX(0.*degree);
  G4ThreeVector RItran;
  RItran.set(0,0,3*cm);
  new G4PVPlacement(
                 RIrot,                // no rotation
                 RItran,  // at (0,0,0)
		 RILV,
                 "RIPV",    // its name
                 worldLV,          // its mother  volume
                 false,            // no boolean operation
                 0,                // copy number
                 fCheckOverlaps);  // checking overlaps
  //
  G4VisAttributes* RIVisAtt= 
    new G4VisAttributes(G4Colour(1.0,1.0,0.0,0.5));
  RIVisAtt->SetVisibility(true);
  RILV->SetVisAttributes(RIVisAtt);
  
  //
  // Always return the physical World
  //
  return worldPV;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void GaletDetectorConstruction::ConstructSDandField()
{
  G4SDManager::GetSDMpointer()->SetVerboseLevel(1);
  // 
  // Sensitive detectors
  //
  GaletSD* galetSD 
    = new GaletSD("galetSD", "GaletHitsCollection",0); 
  G4String name_lv = "GeLV";

  G4SDManager::GetSDMpointer()->AddNewDetector(galetSD);
  SetSensitiveDetector(name_lv,galetSD);

}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
